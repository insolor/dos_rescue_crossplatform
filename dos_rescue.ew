public include dos_rescue.e

include std/dll.e
include std/error.e
include std/graphics.e as graphics
include std/machine.e
include std/text.e

type boolean(integer x)
    return x = TRUE or x = FALSE
end type

constant CS_HREDRAW = 2,
         CS_VREDRAW = 1,
         CS_OWNDC = 32

public constant SW_SHOWNORMAL = 1

constant WS_OVERLAPPED  = #00000000,
         WS_CAPTION     = #00C00000,
         WS_SYSMENU     = #00080000,
         WS_THICKFRAME  = #00040000,
         WS_MINIMIZEBOX = #00020000,
         WS_MAXIMIZEBOX = #00010000 

constant IDI_APPLICATION = 32512, 
         IDC_ARROW = 32512, 
         WHITE_BRUSH = 0,
         BLACK_BRUSH = 4,
         CW_USEDEFAULT = #80000000

constant SYSTEM_FIXED_FONT = 16

constant SRCCOPY = #CC0020

-- WNDCLASS
constant cbSize = 0,
         style  = 4,
         lpfnWndProc = 8,
         cbClsExtra = 12,
         cbWndExtra = 16,
         hInstance  = 20,
         hIcon      = 24,
         hCursor    = 28,
         hbrBackground = 32,
         lpszMenuName  = 36,
         lpszClassName = 40,
         hIconSm = 44,
         SIZE_OF_WNDCLASS = 48 

constant SIZE_OF_MESSAGE = 40
constant MESSAGE = 4

-- PeekMessage options
constant PM_NOREMOVE =  0,
         PM_REMOVE   =  1,
         PM_NOYIELD  =  2

constant WM_CREATE = #0001,
         WM_PAINT  = #000F,
         WM_DESTROY= #0002,
         WM_TIMER  = #0113,
         WM_SIZE   = #0005,
         WM_CHAR   = #102,
         WM_KEYDOWN = #100,
         WM_QUIT = #12,
         WM_CLOSE = #10

constant DIB_RGB_COLORS = 0

-- PAINTSTRUCT
constant rcPaint = 8

-- BITMAPINFO
constant bmiHeader = 0, bmiColors = 40

constant
    sizeofRGBQUAD = 4,
    sizeofBITMAPFILEHEADER = 14,
    sizeofBITMAPCOREHEADER = 12,
    sizeofBITMAPINFOHEADER = 40,
    -- sizeofBITMAPV4HEADER = 108,
    -- sizeofBITMAPV5HEADER = 124,
    $

constant BI_RGB = 0

constant OBJ_BITMAP = 7

public boolean freeze_the_game
freeze_the_game = FALSE

public integer window_exists
window_exists = FALSE

integer redisplay
redisplay = FALSE

constant
    ps = allocate(64),
    rect = allocate(16),
    pBmi = allocate(sizeofBITMAPINFOHEADER + sizeofRGBQUAD*256)

atom hdcWindow, hdcMem, hBitmap
hdcWindow = NULL

-- open the .DLL files
constant
    kernel32 = open_dll("kernel32.dll"),
    user32 = open_dll("user32.dll"),
    gdi32 = open_dll("gdi32.dll")

-- link the C routines
constant
    Sleep = define_c_proc(kernel32, "Sleep", {C_INT}),
    Beep = define_c_proc(kernel32, "Beep", {C_LONG,C_LONG}),
    ExitProcess = define_c_proc(kernel32, "ExitProcess", {C_INT}),
    LoadIcon = define_c_func(user32, "LoadIconA", {C_POINTER, C_INT}, C_INT),
    LoadCursor = define_c_func(user32, "LoadCursorA", {C_POINTER, C_INT}, C_INT),
    RegisterClassEx = define_c_func(user32, "RegisterClassExA", {C_POINTER}, C_INT),
    CreateWindow = define_c_func(user32, "CreateWindowExA", 
        {C_INT, C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT,C_INT},
        C_INT),
    ShowWindow = define_c_proc(user32, "ShowWindow", {C_INT, C_INT}),
    UpdateWindow = define_c_proc(user32, "UpdateWindow", {C_INT}),
    GetMessage = define_c_func(user32, "GetMessageA",
                  {C_INT, C_INT, C_INT, C_INT}, C_INT),
    PeekMessage = define_c_func(user32, "PeekMessageA",
                  {C_INT, C_INT, C_INT, C_INT, C_INT}, C_INT),
    TranslateMessage = define_c_proc(user32, "TranslateMessage", {C_INT}),
    DispatchMessage = define_c_proc(user32, "DispatchMessageA", {C_INT}),
    DestroyWindow = define_c_proc(user32, "DestroyWindow", {C_INT}),
    InvalidateRect = define_c_proc(user32, "InvalidateRect", {C_LONG, C_LONG, C_LONG}),
    BeginPaint = define_c_func(user32, "BeginPaint", {C_INT, C_INT}, C_INT),
    GetClientRect = define_c_proc(user32, "GetClientRect", {C_INT, C_INT}),
    GetWindowRect = define_c_proc(user32, "GetWindowRect", {C_INT, C_INT}),
    DrawText = define_c_proc(user32, "DrawTextA", 
               {C_INT, C_INT, C_INT, C_POINTER, C_INT}),
    EndPaint = define_c_proc(user32, "EndPaint", {C_INT, C_INT}),
    PostQuitMessage = define_c_proc(user32, "PostQuitMessage", {C_INT}),
    DefWindowProc = define_c_func(user32, "DefWindowProcA", 
          {C_INT, C_INT, C_INT, C_INT}, C_INT),
    SetTimer = define_c_proc(user32, "SetTimer", {C_INT, C_INT, C_INT, C_INT}),
    GetDC = define_c_func(user32, "GetDC", {C_INT}, C_INT),
    ReleaseDC = define_c_proc(user32, "ReleaseDC", {C_INT, C_INT}),
    SetWindowPos = define_c_proc(user32, "SetWindowPos", repeat(C_LONG, 7)),
    GetStockObject = define_c_func(gdi32, "GetStockObject", {C_INT}, C_INT),
    CreateDC = define_c_func(gdi32, "CreateDCA", 
                          {C_POINTER, C_POINTER, C_POINTER, C_POINTER}, C_LONG),
    MoveToEx = define_c_proc(gdi32, "MoveToEx", {C_LONG, C_LONG, C_LONG, C_POINTER}),
    LineTo = define_c_proc(gdi32, "LineTo", {C_LONG, C_LONG, C_LONG}),
    SetPixelV = define_c_proc(gdi32, "SetPixelV", {C_LONG, C_LONG, C_LONG, C_LONG}),
    GetPixel = define_c_func(gdi32, "GetPixel", {C_LONG, C_LONG, C_LONG}, C_LONG),
    Ellipse = define_c_proc(gdi32, "Ellipse", {C_LONG, C_LONG, C_LONG, C_LONG, C_LONG}),
    Arc = define_c_proc(gdi32, "Arc", repeat(C_LONG,9)),
    SelectObject = define_c_proc(gdi32, "SelectObject", {C_LONG, C_LONG}),
    SetTextColor = define_c_proc(gdi32, "SetTextColor", {C_LONG, C_LONG}),
    SetBkColor = define_c_proc(gdi32, "SetBkColor", {C_LONG, C_LONG}),
    SetBkMode = define_c_proc(gdi32, "SetBkMode", {C_LONG, C_LONG}),
    CreatePen = define_c_func(gdi32, "CreatePen", {C_LONG, C_LONG, C_LONG}, C_LONG),
    FillRect = define_c_proc(user32, "FillRect", {C_LONG, C_LONG, C_LONG}),
    Polygon = define_c_proc(gdi32, "Polygon", {C_LONG, C_LONG, C_LONG}),
    Polyline = define_c_proc(gdi32, "Polyline", {C_LONG, C_LONG, C_LONG}),
    CreateSolidBrush = define_c_func(gdi32, "CreateSolidBrush", {C_LONG}, C_LONG),
    DeleteObject = define_c_proc(gdi32, "DeleteObject", {C_LONG}),
    CreateCompatibleDC = define_c_func(gdi32, "CreateCompatibleDC", {C_LONG}, C_LONG),
    CreateDIBSection = define_c_func(gdi32, "CreateDIBSection",
        {C_LONG, C_LONG, C_LONG, C_LONG, C_LONG, C_LONG}, C_LONG),
    SetDIBColorTable = define_c_proc(gdi32, "SetDIBColorTable", {C_LONG, C_LONG, C_LONG, C_LONG}),
    BitBlt = define_c_proc(gdi32, "BitBlt",repeat(C_LONG,9)),
    DeleteDC = define_c_proc(gdi32, "DeleteDC", {C_LONG}),
    $

------------------------------------------------------------------------------------------------------

atom bytes_per_line

function make_color(integer red, integer green, integer blue)
    -- return blue*65536 + green*256 + red
    return blue*#10000 + green*#100 + red
end function

function make_color_s(sequence s)
	s = s * {#1_0000,#100,1}
	return s[1] + s[2] + s[3]
end function

function reverse_color(object colors)
    if atom(colors) then
        colors = and_bits(colors,#FF)*#10000 +
            and_bits(colors,#FF00) +
            floor(and_bits(colors,#FF0000)/#10000)
    else
        for i = 1 to length(colors) do
            colors[i] = and_bits(colors[i],#FF)*#10000 +
                and_bits(colors[i],#FF00) +
                floor(and_bits(colors[i],#FF0000)/#10000)
        end for
    end if
    return colors
end function

sequence color_map
color_map = {
    #000000, #AA0000, #00AA00, #AAAA00, #0000AA, #AA00AA, #0055AA, #AAAAAA,
    #555555, #FF5555, #55FF55, #FFFF55, #5555FF, #FF55FF, #55FFFF, #FFFFFF,
    #000000, #141414, #202020, #2C2C2C, #383838, #444444, #505050, #616161,
    #717171, #818181, #919191, #A1A1A1, #B6B6B6, #CACACA, #E2E2E2, #FFFFFF,
    #FF0000, #FF0040, #FF007D, #FF00BE, #FF00FF, #BE00FF, #7D00FF, #4000FF,
    #0000FF, #0040FF, #007DFF, #00BEFF, #00FFFF, #00FFBE, #00FF7D, #00FF40,
    #00FF00, #40FF00, #7DFF00, #BEFF00, #FFFF00, #FFBE00, #FF7D00, #FF4000,
    #FF7D7D, #FF7D9D, #FF7DBE, #FF7DDE, #FF7DFF, #DE7DFF, #BE7DFF, #9D7DFF,
    #7D7DFF, #7D9DFF, #7DBEFF, #7DDEFF, #7DFFFF, #7DFFDE, #7DFFBE, #7DFF9D,
    #7DFF7D, #9DFF7D, #BEFF7D, #DEFF7D, #FFFF7D, #FFDE7D, #FFBE7D, #FF9D7D,
    #FFB6B6, #FFB6C6, #FFB6DA, #FFB6EA, #FFB6FF, #EAB6FF, #DAB6FF, #C6B6FF,
    #B6B6FF, #B6C6FF, #B6DAFF, #B6EAFF, #B6FFFF, #B6FFEA, #B6FFDA, #B6FFC6,
    #B6FFB6, #C6FFB6, #DAFFB6, #EAFFB6, #FFFFB6, #FFEAB6, #FFDAB6, #FFC6B6,
    #710000, #71001C, #710038, #710055, #710071, #550071, #380071, #1C0071,
    #000071, #001C71, #003871, #005571, #007171, #007155, #007138, #00711C,
    #007100, #1C7100, #387100, #557100, #717100, #715500, #713800, #711C00,
    #713838, #713844, #713855, #713861, #713871, #613871, #553871, #443871,
    #383871, #384471, #385571, #386171, #387171, #387161, #387155, #387144,
    #387138, #447138, #557138, #617138, #717138, #716138, #715538, #714438,
    #715050, #715059, #715061, #715069, #715071, #695071, #615071, #595071,
    #505071, #505971, #506171, #506971, #507171, #507169, #507161, #507159,
    #507150, #597150, #617150, #697150, #717150, #716950, #716150, #715950,
    #400000, #400010, #400020, #400030, #400040, #300040, #200040, #100040,
    #000040, #001040, #002040, #003040, #004040, #004030, #004020, #004010,
    #004000, #104000, #204000, #304000, #404000, #403000, #402000, #401000,
    #402020, #402028, #402030, #402038, #402040, #382040, #302040, #282040,
    #202040, #202840, #203040, #203840, #204040, #204038, #204030, #204028,
    #204020, #284020, #304020, #384020, #404020, #403820, #403020, #402820,
    #402C2C, #402C30, #402C34, #402C3C, #402C40, #3C2C40, #342C40, #302C40,
    #2C2C40, #2C3040, #2C3440, #2C3C40, #2C4040, #2C403C, #2C4034, #2C4030,
    #2C402C, #30402C, #34402C, #3C402C, #40402C, #403C2C, #40342C, #40302C,
    #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF, #FFFFFF
}


integer color_mask

sequence brushes -- set up 16 predefined brush colors
sequence pens -- set up 16 predefined pens
constant PS_SOLID = 0

constant NULL_BRUSH = 5
constant null_brush = c_func(GetStockObject, {NULL_BRUSH})

brushes = {}
pens = {}

public procedure clear_region(integer x1, integer y1, integer x2, integer y2)
    poke4(rect, {x1, y1, x2, y2})
    c_proc(FillRect, hdcMem & rect & brushes[1+last_bk_color])
    redisplay = TRUE
end procedure

constant ppvBits = allocate(4)
function create_dib_section(atom hdcWindow, integer width, integer height, sequence color_map)
    poke4(pBmi+bmiHeader, {
        sizeofBITMAPINFOHEADER, -- dword bcSize
        width, -- dword bcWidth,
        -height, -- dword bcHeight
        1 + #10000*8, -- word bcPlanes, word bcBitCount
        BI_RGB, -- dword biCompression
        0, -- dword biSizeImage
        12500, -- dword biXPelsPerMeter
        12500, -- dword biYPelsPerMeter
        length(color_map), -- dword biClrUsed 
        0 -- dword biClrImportant -- all colors are important
    })
    
    poke4(pBmi+bmiColors, color_map)
    
    return c_func(CreateDIBSection,{hdcWindow, pBmi, DIB_RGB_COLORS, ppvBits, NULL, NULL})
end function

procedure set_dib_color_table(atom hdcWindow, integer start_index, integer n, object colors)
    poke4(pBmi+bmiColors, colors)
    c_proc(SetDIBColorTable,{hdcWindow, start_index, n, pBmi+bmiColors})
end procedure

------------------------------------------------------------------------------------------------------

function default_handler(atom hwnd, atom iMsg, atom wParam, atom lParam, sequence handlers)
    return c_func(DefWindowProc, {hwnd, iMsg, wParam, lParam})
end function
public sequence custom_handlers
custom_handlers = {routine_id("default_handler")}

public integer repaint
repaint = -1
integer abort_program
abort_program = 0

sequence map_key
map_key = repeat(-1,#10000)
-- map_key[16] = 16 -- shift
-- map_key[17] = 17 -- ctrl
map_key[20] = 314 -- caps lock
map_key[33] = 329 -- page-up
map_key[34] = 337 -- page-down
map_key[35] = 335 -- end
map_key[36] = 327 -- home
map_key[37] = 331 -- left
map_key[38] = 328 -- up
map_key[39] = 333 -- right
map_key[40] = 336 -- down
map_key[45] = 338 -- insert
map_key[46] = 339 -- delete
map_key[112] = 315 -- F1
map_key[113] = 316 -- F2
map_key[114] = 317 -- F3
map_key[115] = 318 -- F4
map_key[116] = 319 -- F5
map_key[117] = 320 -- F6
map_key[118] = 321 -- F7
map_key[119] = 322 -- F8
map_key[120] = 323 -- F9
map_key[121] = 324 -- F10
map_key[122] = {343, 389} -- F11
map_key[123] = {344, 390} -- F12

constant HWND_TOP = 0

function WndProc(atom hwnd, atom iMsg, atom wParam, atom lParam)
-- callback routine to handle Window class
    sequence winsize,clientsize,seqrect
    
    if iMsg = WM_CREATE then
        window_exists = TRUE
        c_proc(GetWindowRect,{hwnd,rect})
        winsize = peek4u({rect,4})
        winsize[3] -= winsize[1]
        winsize[4] -= winsize[2]
        
        c_proc(GetClientRect, {hwnd,rect})
        clientsize = peek4u({rect+8,2})
        
        winsize[3] = winsize[3] - clientsize[1] + screen_size_x
        winsize[4] = winsize[4] - clientsize[2] + screen_size_y
        
        c_proc(SetWindowPos, hwnd & 0 & winsize & HWND_TOP)
        
        hdcWindow = c_func(GetDC, {hwnd})
        
        return 0
        
    elsif iMsg = WM_PAINT then
        hdcWindow = c_func(BeginPaint, {hwnd, ps})
            seqrect = peek4u({ps+rcPaint, 4})
            c_proc(BitBlt, hdcWindow & seqrect & hdcMem & seqrect[1..2] & SRCCOPY)
        c_proc(EndPaint, {hwnd, ps})
        
        hdcWindow = c_func(GetDC, {hwnd})
        
        return 0
        
    elsif iMsg = WM_KEYDOWN then
        if map_key[wParam] >= 0 then
            char_buff &= map_key[wParam]
            return 0
        -- else
            -- char_buff &= wParam
            -- return 0
        end if
    elsif iMsg = WM_CHAR 
            then
        -- record an input character from the keyboard
        char_buff &= wParam
        return 0
        
    elsif iMsg = WM_CLOSE then
        abort_program = 1 -- Abort program when the user closes the window
        -- do not return 0 --
        
    elsif iMsg = WM_DESTROY then
        c_proc(ReleaseDC, {hwnd, hdcWindow})
        c_proc(PostQuitMessage, {0})
        window_exists = 0
        if abort_program then
            abort(0)
        end if
        return 0
    end if
    
    return call_func(custom_handlers[$],
        {hwnd, iMsg, wParam, lParam, custom_handlers[1..$-1]})
end function

------------------------------------------------------------------------------------------------------

atom msg
msg = allocate(SIZE_OF_MESSAGE)

public object AppName
AppName = 0

constant icon_names = {"exw","euiw","eui"}
function get_icon()
    atom icon_name,icon_handle
    for n = 1 to length(icon_names) do
        icon_name = allocate_string(icon_names[n])
        icon_handle = c_func(LoadIcon,{instance(),icon_name})
        free(icon_name)
        if icon_handle then
            return icon_handle
        end if
    end for
    
    return c_func(LoadIcon, {0, IDI_APPLICATION})
end function

atom hwnd

procedure create_window()
    atom szAppName
    atom wndclass
    atom WndProcAddress
    atom class
    atom mq
    atom icon
    
    -- initial window set up
    if atom(AppName) then
        AppName = command_line()
        AppName = AppName[2]
    end if
    szAppName = allocate_string(AppName)

    -- get address for callback
    WndProcAddress = call_back(routine_id("WndProc")) 

    wndclass = allocate(SIZE_OF_WNDCLASS)
    poke4(wndclass + cbSize, SIZE_OF_WNDCLASS)
    poke4(wndclass + style, or_all({CS_HREDRAW, CS_VREDRAW, CS_OWNDC}))
    poke4(wndclass + lpfnWndProc, WndProcAddress)
    poke4(wndclass + cbClsExtra, 0)
    poke4(wndclass + cbWndExtra, 0)
    poke4(wndclass + hInstance, 0) --hInstance
    
    icon = get_icon()
    poke4(wndclass + hIcon, icon)
    poke4(wndclass + hCursor, c_func(LoadCursor, {NULL, IDC_ARROW}))
    poke4(wndclass + hbrBackground, c_func(GetStockObject, {BLACK_BRUSH}))
    poke4(wndclass + lpszMenuName, NULL)
    poke4(wndclass + lpszClassName, szAppName)
    poke4(wndclass + hIconSm, 0)

    class = c_func(RegisterClassEx, {wndclass})
    if class = 0 then
        puts(1, "Couldn't register class\n")
        abort(1)
    end if

    hwnd = c_func(CreateWindow, {
              0,                     -- extended style
              szAppName,             -- window class name
              allocate_string(AppName), -- window caption
              or_all({WS_OVERLAPPED,
                      WS_MINIMIZEBOX,
                      WS_CAPTION,
                      WS_SYSMENU
                      }), -- window style
              0,         -- initial x position
              0,         -- initial y position
              100,  --640, --CW_USEDEFAULT,         -- initial x size
              100,  --480, --CW_USEDEFAULT,         -- initial y size
              NULL,                  -- parent window handle
              NULL,                  -- window menu handle
              0 ,                    -- hInstance // program instance handle
              NULL})                 -- creation parameters

    if hwnd = 0 then
        puts(1, "Couldn't CreateWindow\n")
        abort(1)
    end if

    c_proc(ShowWindow, {hwnd, SW_SHOWNORMAL})
    c_proc(UpdateWindow, {hwnd})
    
    -- create task to check message queue
    mq = task_create(routine_id("message_loop"), {})
    -- check the queue every .2 to .3 seconds
    -- (main program must do a task_yield periodically
    -- or the window will be frozen)
    task_schedule(mq, {.01, .05}) -- make mouse very responsive
    -- assume hdcWindow has now been set
end procedure

procedure message_loop()
    -- initial task - message loop using PeekMessage
    while TRUE do
        if c_func(PeekMessage, {msg, NULL, 0, 0, PM_REMOVE}) then
            -- Windows message is there
            if peek4u(msg+MESSAGE) = WM_QUIT then
                exit
            end if
            c_proc(TranslateMessage, {msg})
            c_proc(DispatchMessage, {msg})
        else
            -- no messages, let another task run
            if redisplay then
                c_proc(GetClientRect,{hwnd,rect})
                c_proc(InvalidateRect,{hwnd,rect,FALSE})
                redisplay = FALSE
            end if
            task_yield()
        end if
    end while
end procedure

------------------------------------------------------------------------------------------------------
procedure init_window(atom hwnd)
    
end procedure

public function graphics_mode(integer m)
    integer ncolors
    sequence vc
    if m = -1 then
        video_mode = m
        c_proc(DestroyWindow,{hwnd})
    elsif sequence(video_modes[m+1]) then
        video_mode = m
        for i = 1 to length(brushes) do
            c_proc(DeleteObject, {brushes[i]})
            c_proc(DeleteObject, {pens[i]})
        end for
        ncolors = video_modes[m+1][VC_NCOLORS]
        color_mask = ncolors-1
        brushes = repeat(0, ncolors)
        pens = brushes
        for i = 1 to ncolors do
            brushes[i] = c_func(CreateSolidBrush, {color_map[i]})
            pens[i] = c_func(CreatePen, {PS_SOLID, 1, color_map[i]})
        end for
        vc = video_modes[video_mode+1]
        columns = vc[VC_COLUMNS]
        lines = vc[VC_LINES]
        screen_size_x = vc[VC_XPIXELS]
        screen_size_y = vc[VC_YPIXELS]
        bytes_per_line = and_bits(screen_size_x+3,-4)
        hdcMem = c_func(CreateCompatibleDC,{hdcWindow})
        hBitmap = create_dib_section(hdcWindow, screen_size_x, screen_size_y, reverse_color(color_map))
        c_proc(SelectObject,{hdcMem,hBitmap})
        c_proc(SelectObject, {hdcMem, c_func(GetStockObject, {SYSTEM_FIXED_FONT})})
        
        if window_exists then
            c_proc(DestroyWindow,{hwnd})
        end if
        create_window() -- initial setup of hdc
    end if
    return 0
end function

------------------------------------------------------------------------------------------------------

public procedure all_palette(sequence s)
    integer n
    if length(s) >= length(color_map) then
        n = length(color_map)
    else
        n = length(s)
    end if
    for i = 1 to n do
        color_map[i] = make_color_s(s[i]*255/63)
        c_proc(DeleteObject, {brushes[i]})
        c_proc(DeleteObject, {pens[i]})
        brushes[i] = c_func(CreateSolidBrush, {color_map[i]})
        pens[i] = c_func(CreatePen, {PS_SOLID, 1, color_map[i]})
    end for
end procedure

public function get_all_palette()
	sequence s = color_map
	for i = 1 to length(s) do
		s[i] = floor(and_bits(s[i],{#FF0000,#FF00,#FF })/{#40000,#400,#4 } ) 
	end for
	return s
end function

public function palette(integer color_index, sequence new_color_triple)
    sequence old_color
    if color_index < 0 or color_index >= length(color_map) then
        return -1
    else
        old_color = floor(and_bits(color_map[color_index+1],{#FF0000,#FF00,#FF })/{#40000,#400,#4 } )
        new_color_triple = floor(new_color_triple)
        color_map[color_index+1] = make_color_s(floor(new_color_triple*255/63))
        c_proc(DeleteObject,{brushes[color_index+1]})
        c_proc(DeleteObject,{pens[color_index+1]})
        brushes[color_index+1] = c_func(CreateSolidBrush, {color_map[color_index+1]})
        pens[color_index+1] = c_func(CreatePen, {PS_SOLID, 1, color_map[color_index+1]})
        return old_color
    end if
end function

-- public procedure pixel(object c, sequence s)
-- -- override Euphoria built-in 
    -- integer i, xstart, y, pcount, color
    
    -- if window_exists then
        -- c = and_bits(color_mask,c)
        -- if atom(c) then
           -- -- single pixel
           -- c_proc(SetPixelV, {hdcMem, s[1], s[2], color_map[1+c]})
            
        -- else
            -- -- several pixels on one row
            -- y = s[2]
            -- xstart = s[1]
            -- i = 1
            -- c_proc(MoveToEx, {hdcMem, xstart, y, 0})
            -- while i <= length(c) do
                -- pcount = 1
                -- color = c[i]
                -- -- how many in a row are the same color?
                -- while i + pcount <= length(c) and c[i+pcount] = color do
                    -- pcount += 1
                -- end while
                -- if pcount >= 2 then
                    -- c_proc(SelectObject, {hdcMem, pens[1+color]})
                    -- c_proc(LineTo, {hdcMem, xstart+pcount, y})
                    -- i += pcount
                -- else
                    -- -- do one pixel
                    -- c_proc(SetPixelV, {hdcMem, xstart, y, color_map[1+c[i]]})
                    -- c_proc(MoveToEx, {hdcMem, xstart+1, y, 0})
                    -- i += 1
                -- end if
                -- xstart += pcount
            -- end while  
        -- end if
        -- redisplay = TRUE
    -- end if
-- end procedure


-- public function get_pixel(sequence s)
-- -- override Euphoria built-in 
    -- sequence p
    -- integer xstart, y
    
    -- if length(s)<2 or length(s)>3 then
        -- crash("get_pixel must be supplied a sequence of length 2 or 3.")
    -- elsif length(s) = 2 then
        -- return c_func(GetPixel, {hdcMem, s[1], s[2]})
    -- else
        -- p = repeat(0, s[3])
        -- y = s[2]
        -- xstart = s[1]
        -- for i = 1 to s[3] do
            -- p[i] = c_func(GetPixel, {hdcMem, xstart, y}) 
            -- xstart += 1
        -- end for
        -- return p
    -- end if
-- end function

global procedure pixel(object c, sequence xy)
    atom off
    if window_exists and xy[1] >= 0 and xy[1] < screen_size_x and
            xy[2] >= 0 and xy[2] < screen_size_y then
        xy = floor(xy)
        if sequence(c) and length(c) >= screen_size_x-xy[1] then
            c = c[1..screen_size_x-xy[1]-1]
        end if
        c = and_bits(color_mask,c)
        off = peek4u(ppvBits) + xy[1] + xy[2]*bytes_per_line
        poke(off,c)
        redisplay = TRUE
    end if
end procedure

global function get_pixel(sequence xyn)
    atom off
    if window_exists and xyn[1] >= 0 and xyn[1] < screen_size_x and
            xyn[2] >= 0 and xyn[2] < screen_size_y then
        xyn = floor(xyn)
        off = peek4u(ppvBits) + xyn[1] + xyn[2]*bytes_per_line
        if length(xyn) = 2 then
            return peek(off)
        elsif length(xyn) = 3 then
            if xyn[3]+xyn[1]>=screen_size_x then
                return peek({off,screen_size_x-xyn[1]-1}) & repeat(0,xyn[3]+xyn[1]-screen_size_x)
            else
                return peek({off,xyn[3]})
            end if
        end if
    else
        return -1
    end if
end function

public procedure ellipse(integer color, integer fill, sequence coord1, sequence coord2)
    if window_exists then
        coord2 += 1
        if not color then
            color = last_bk_color
        end if
        color = and_bits(color_mask,color)
        c_proc(SelectObject, {hdcMem, pens[1+color]})
        if fill then
            c_proc(SelectObject, {hdcMem, brushes[1+color]})
        else
            c_proc(SelectObject, {hdcMem, null_brush})
        end if
        c_proc(Ellipse, hdcMem & coord1 & coord2)
        redisplay = TRUE
    end if
end procedure

atom points, npoints
points = NULL
npoints = -1
public procedure draw_line(integer c, sequence xyarray)
    if window_exists then
        if not c then
            c = last_bk_color
        end if
        c = and_bits(color_mask,c)
        c_proc(SelectObject, {hdcMem, pens[1+c]})
        if length(xyarray)=2 then
            c_proc(MoveToEx, {hdcMem, xyarray[1][1], xyarray[1][2], 0})
            c_proc(LineTo, {hdcMem, xyarray[2][1], xyarray[2][2]})
        else
            if length(xyarray)>npoints then
                if points then
                    free(points)
                end if
                points = allocate(length(xyarray)*8)
                npoints = length(xyarray)
            end if
            
            for n = 0 to length(xyarray)-1 do
                poke4(points + n*8,xyarray[n+1])
            end for
            
            c_proc(Polyline,{hdcMem, points, length(xyarray)})
        end if
        redisplay = TRUE
    end if
end procedure

public procedure polygon(integer c, integer fill, sequence xyarray)
    if window_exists then
        if not c then
            c = last_bk_color
        end if
        c = and_bits(color_mask,c)
        if length(xyarray)>npoints then
            if points then
                free(points)
            end if
            points = allocate(length(xyarray)*8)
            npoints = length(xyarray)
        end if
        
        for n = 0 to length(xyarray)-1 do
            poke4(points + n*8,xyarray[n+1])
        end for
        
        c_proc(SelectObject, {hdcMem, pens[1+c]})
        
        if fill then
            c_proc(SelectObject, {hdcMem, brushes[1+c]})
        else
            c_proc(SelectObject, {hdcMem, null_brush})
        end if
        
        c_proc(Polygon,{hdcMem, points, length(xyarray)})
        redisplay = TRUE
    end if
end procedure

------------------------------------------------------------------------------------------------------

-- constant LEFT = 0, TOP = 4, RIGHT = 8, BOTTOM = 12
constant DT_SINGLE_LINE = #00000020
constant OPAQUE = 2

public
procedure putsxy(sequence pos, sequence string, 
                        integer fcolor, integer bcolor)
    atom s
    
    -- poke4(rect+LEFT, pos[1])
    -- poke4(rect+TOP, pos[2])
    -- poke4(rect+RIGHT, pos[1]+length(string)*8)
    -- poke4(rect+BOTTOM, pos[2]+18)
    poke4(rect, pos & pos[1]+length(string)*8 & pos[2]+18)
    
    c_proc(SetTextColor, {hdcMem, color_map[1+and_bits(color_mask,fcolor)]})
    c_proc(SetBkColor, {hdcMem, color_map[1+and_bits(color_mask,bcolor)]})
    c_proc(SetBkMode, {hdcMem, OPAQUE})
    
    s = allocate_string(string)
    c_proc(DrawText, {hdcMem, s, -1, rect, DT_SINGLE_LINE})
    free(s)
    redisplay = TRUE
end procedure

------------------------------------------------------------------------------------------------------

public procedure sound(integer freq)
    c_proc(Beep,{freq,50})
end procedure
