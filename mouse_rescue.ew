include dos_rescue.e
include mouse_rescue.e

public include std/math.e



integer handle_events
handle_events = or_all({MOVE, LEFT_DOWN, LEFT_UP, RIGHT_DOWN, RIGHT_UP, MIDDLE_DOWN, MIDDLE_UP})
public procedure mouse_events(integer events)
-- select the mouse events to be reported by get_mouse()
-- e.g. mouse_events(LEFT_UP + LEFT_DOWN + RIGHT_DOWN)
    -- machine_proc(M_MOUSE_EVENTS, events)
    handle_events = events
end procedure

public procedure mouse_pointer(integer show_it)
-- show (1) or hide (0) the mouse pointer
    -- machine_proc(M_MOUSE_POINTER, show_it)
    -- foo
end procedure

-- global
constant
    WM_MOUSEMOVE = 512,
    WM_LBUTTONDOWN = 513,
    WM_LBUTTONUP = 514,
    -- WM_LBUTTONDBLCLK = 515,
    WM_RBUTTONDOWN = 516,
    WM_RBUTTONUP = 517,
    -- WM_RBUTTONDBLCLK = 518,
    WM_MBUTTONDOWN = 519,
    WM_MBUTTONUP = 520
    -- WM_MBUTTONDBLCLK = 521,
    -- WM_MOUSEWHEEL = 522

function mouse_event_handler(atom hwnd, atom iMsg, atom wParam, atom lParam, sequence handlers)
    if iMsg = WM_MOUSEMOVE and and_bits(handle_events,MOVE) then
        mouse_buff = append(mouse_buff,{MOVE,LOWORD(lParam),HIWORD(lParam)})
        
    elsif iMsg = WM_LBUTTONDOWN and and_bits(handle_events,LEFT_DOWN) then
        mouse_buff = append(mouse_buff,{LEFT_DOWN,LOWORD(lParam),HIWORD(lParam)})
        
    elsif iMsg = WM_LBUTTONUP and and_bits(handle_events,LEFT_UP) then
        mouse_buff = append(mouse_buff,{LEFT_UP,LOWORD(lParam),HIWORD(lParam)})
        
    elsif iMsg = WM_MBUTTONDOWN and and_bits(handle_events,MIDDLE_DOWN) then
        mouse_buff = append(mouse_buff,{MIDDLE_DOWN,LOWORD(lParam),HIWORD(lParam)})
        
    elsif iMsg = WM_MBUTTONUP and and_bits(handle_events,MIDDLE_UP) then
        mouse_buff = append(mouse_buff,{MIDDLE_UP,LOWORD(lParam),HIWORD(lParam)})
        
    elsif iMsg = WM_RBUTTONDOWN and and_bits(handle_events,RIGHT_DOWN) then
        mouse_buff = append(mouse_buff,{RIGHT_DOWN,LOWORD(lParam),HIWORD(lParam)})
        
    elsif iMsg = WM_RBUTTONUP and and_bits(handle_events,RIGHT_UP) then
        mouse_buff = append(mouse_buff,{RIGHT_UP,LOWORD(lParam),HIWORD(lParam)})
        
    elsif length(handlers) > 0 then
        return call_func(handlers[$],{hwnd,iMsg,wParam,lParam,handlers[1..$-1]})
    end if
    
    return 0
end function

custom_handlers &= routine_id("mouse_event_handler")
