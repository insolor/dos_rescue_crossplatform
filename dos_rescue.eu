public include dos_rescue.e

include std/error.e
include std/graphics.e as graphics
include std/machine.e
include std/map.e
include std/text.e

include xlib.e
with trace
atom 
	display    = -1,
	rootwindow = -1,
	window     = -1,
	screen     = -1,
	pixmap     = -1,
	font       = -1

integer mouse_handler_rid = -1

public constant 
	ARROW_LEFT  = 331,
	ARROW_RIGHT = 333,
	ARROW_UP    = 328,
	ARROW_DOWN  = 336,
	$

symmap[XK_Left]  = ARROW_LEFT
symmap[XK_Right] = ARROW_RIGHT
symmap[XK_Up]    = ARROW_UP
symmap[XK_Down]  = ARROW_DOWN

export procedure set_mouse_handler( integer rid )
	mouse_handler_rid = rid
end procedure

map graphics_context = map:new()
map allocated_color  = map:new()

type boolean(integer x)
    return x = TRUE or x = FALSE
end type

public boolean freeze_the_game
freeze_the_game = FALSE

public integer window_exists
window_exists = FALSE

integer redisplay
redisplay = FALSE

function scale( integer color )
	return floor( (color / 0x100 ) * 0x10000 ) + color
end function

function make_color(integer red, integer green, integer blue)
    -- return blue*65536 + green*256 + red
--     return blue*#10000 + green*#100 + red
	return { scale( red ), scale( green ), scale( blue ) }
end function

function make_color_s(sequence s)
-- 	s = s * {#1_0000,#100,1}
-- 	return s[1] + s[2] + s[3]
	return make_color( s[1], s[2], s[3] )
end function

sequence color_map
color_map = repeat(0, 2049)
--                             RED, GREEN, BLUE 0-255
color_map[1+BLACK] = make_color(1, 1, 1)
color_map[1+BLUE] = make_color(40, 40, 140) 
color_map[1+GREEN] = make_color(0, 128, 0)
color_map[1+CYAN] = make_color(0, 128, 128)
color_map[1+RED] = make_color(128, 0, 0)
color_map[1+MAGENTA] = make_color(128, 0, 128)
color_map[1+BROWN] = make_color(128, 128, 0)
color_map[1+WHITE] = make_color(192, 192, 192)
color_map[1+GRAY] = make_color(64, 64, 64)
color_map[1+BRIGHT_BLUE] = make_color(90, 90, 255)
color_map[1+BRIGHT_GREEN] = make_color(0,255,0)
color_map[1+BRIGHT_CYAN] = make_color(0, 255, 255)
color_map[1+BRIGHT_RED] = make_color(255, 0, 0)
color_map[1+BRIGHT_MAGENTA] = make_color(255, 0, 255)
color_map[1+YELLOW] = make_color(255, 255, 0)
color_map[1+BRIGHT_WHITE] = make_color(255, 255, 255)

function get_color( integer color )
	sequence mapped_color = color_map[color + 1]
	atom c = map:get( allocated_color, mapped_color, 0 )
	if not c then
		c = alloc_color( display, mapped_color[1], mapped_color[2], mapped_color[3], 1 )
		map:put( allocated_color, mapped_color, c )
	end if
	return c
end function

function get_gc( integer fore_color = last_text_color, integer bk_color = last_bk_color)
	atom 
		bk   = get_color( bk_color ),
		fore = get_color( fore_color )
	
	atom gc = map:get( graphics_context, { bk, fore }, 0 )
	if not gc then
		-- need to create one!
		atom gcv = new_GCValue( 1 )
		set_GC_value( gcv, GCBackground, peek_pointer( bk ) )
		set_GC_value( gcv, GCForeground, peek_pointer( fore ) )
		gc = XCreateGC( display, pixmap, GCBackground + GCForeground, gcv )
		map:put( graphics_context, { bk, fore }, gc )
	end if
	return gc
end function

for i = 1 to 1025 by 16 do
    color_map[i+16..i+31] = color_map[i..i+15]
end for

public procedure clear_region(integer x1, integer y1, integer x2, integer y2)
	polygon( last_bk_color, 1, { {x1, y1}, {x2, y1}, {x2, y2}, {x1, y2} } )
end procedure

integer abort_program
abort_program = 0

procedure blit()
	XCopyArea( 
		display, 
		pixmap, 
		window, 
		get_gc(), 
		0, 
		0, 
		screen_size_x, 
		screen_size_y,
		0,
		0)
end procedure

atom
	wm_protocols,
	wm_destroy

procedure main( integer first_time )
	if first_time then
		-- create the window
		display = XOpenDisplay( 0 )
		screen  = DefaultScreen( display )
		rootwindow = RootWindow( display, screen )
		screen_size_x = video_modes[video_mode+1][VC_XPIXELS]
		screen_size_y = video_modes[video_mode+1][VC_YPIXELS]
		window = XCreateSimpleWindow( display, rootwindow, 100, 100, 
			screen_size_x + 2, 
			screen_size_y + 2, 
			2, last_bk_color, 0xCCCCCC )
		
		wm_protocols = XInternAtom(display, "WM_PROTOCOLS", 0)
		wm_destroy = XInternAtom( display, "WM_DELETE_WINDOW", 0)
		XSetWMProtocols( display, window, wm_destroy )
		XMapWindow( display, window )
		window_exists = 1
		
		pixmap = XCreatePixmap( display, window, 
			screen_size_x, 
			screen_size_y, 
			XDefaultDepth( display, screen ) )
		
		atom default_gcontext = XGContextFromGC( XDefaultGC( display, screen ) )
		
		clear_region(0,0,screen_size_x,screen_size_y)
		
		XSelectInput( display, window, ExposureMask + KeyPressMask + PointerMotionMask + ButtonPressMask + ButtonReleaseMask )
	end if
	
	atom event = new_XEvent( 1 )
	while 1 do
		if XPending( display ) then
			XNextEvent( display, event )
			integer event_type = peek4s( event )
			switch event_type do
				case ClientMessage then
					atom message_type = peek_pointer( event + XClientMessageEvent_message_type )
					if message_type = wm_protocols then
						if wm_destroy = peek_pointer( event + XClientMessageEvent_data_l ) then
							XDestroyWindow( display, window )
							XCloseDisplay( display )
							abort( 0 )
						end if
					end if
					
				case Expose, GraphicsExpose then
					blit()
				
				case KeyPress then
					integer keysym = XLookupKeysym( event )
					if keysym then
						integer mapped_sym = symmap[keysym]
						if mapped_sym then
							keysym = mapped_sym
						elsif keysym >= 'a' and keysym <= 'z' then
							integer state = peek4s( event + XKeyEvent_state )
							if and_bits( ShiftMask, state ) then
								if not and_bits( LockMask, state ) then
									keysym += 'A' - 'a'
								end if
							elsif and_bits( LockMask, state ) then
								keysym += 'A' - 'a'
							end if
						end if
					end if
					char_buff &= keysym
				
				case ButtonPress, ButtonRelease, MotionNotify then
					if mouse_handler_rid != -1 then
						call_proc( mouse_handler_rid, { event, event_type } )
					end if
			end switch
		else
			if first_time then
				-- create task to check message queue
				atom mq = task_create(routine_id("main"), {FALSE})
				-- check the queue every .2 to .3 seconds
				-- (main program must do a task_yield periodically
				-- or the window will be frozen)
				task_schedule(mq, {.08, .12}) -- make keyboard very responsive
				-- assume hdc has now been set
				return
			end if
			
			if freeze_the_game then
				sleep( 0.001 ) -- sleep n * .001 seconds 
				task_clock_stop()
				if length(char_buff) then
					freeze_the_game = FALSE
					char_buff = char_buff[2..$] -- delete the char
					task_clock_start()
					task_yield()
				end if
			else
				if redisplay then
				    blit()
				    redisplay = FALSE
				end if
				
				task_yield()
			end if
			
		end if
	end while
end procedure

------------------------------------------------------------------------------------------------------

public function graphics_mode(integer m)
	integer ncolors
	if m = -1 then
		video_mode = m
		XDestroyWindow( display, window )
	elsif sequence(video_modes[m+1]) then
		video_mode = m
		ncolors = video_modes[m+1][VC_NCOLORS]
		if ncolors > 2048 then
			-- must expand color_map or change the implementation
			-- for more than 2048 colors. (or use Direct X or Open GL)
			crash("Unsupported number of colors %d.", ncolors)
		end if
		if window_exists then
			-- TODO: free GCs
			XDestroyWindow( display, window )
		end if
		main(TRUE) -- initial setup of hdc
	end if
	return 0
end function

------------------------------------------------------------------------------------------------------

public procedure all_palette(sequence s)
	if length(s) != video_modes[video_mode+1][VC_NCOLORS] then
		crash("The length of s(=%d) to all_palette doesn't match color depth(=%d).", 
		{length(s), video_modes[video_mode+1][VC_NCOLORS]})
	end if
	for i = 1 to length(s) do
		color_map[i] = make_color_s(s[i]*4)
	end for
end procedure

public function get_all_palette()
	integer ncolors = video_modes[video_mode+1][VC_NCOLORS]
	sequence s = color_map[1..ncolors]
	for i = 1 to length(s) do
		s[i] = floor(and_bits(s[i],{#FF0000,#FF00,#FF })/{#40000,#400,#4 } ) 
	end for
	return s
end function

public function palette(integer color_index, sequence new_color_triple)
	sequence old_color = 
	floor(and_bits(color_map[color_index+1],{#FF0000,#FF00,#FF })/{#40000,#400,#4 } )
	color_map[color_index+1] = make_color_s(new_color_triple*4)
	return old_color
end function

public procedure pixel(object c, sequence s)
-- -- override Euphoria built-in 
    integer i, xstart, y, pcount, color
	if window_exists then
		s = floor( s )
		if atom(c) then
			-- single pixel
			XDrawPoint( display, pixmap, get_gc( c ), s[1], s[2] )
		
		else
			-- several pixels on one row
			y = s[2]
			xstart = s[1]
			i = 1
			while i <= length(c) do
				pcount = 1
				color = c[i]
				-- how many in a row are the same color?
				while i + pcount <= length(c) and c[i+pcount] = color do
					pcount += 1
				end while
				if pcount >= 2 then
					XDrawLine( display, pixmap, get_gc( color ), { {xstart, y}, {xstart + pcount, y}})
					i += pcount
				else
					-- do one pixel
					XDrawPoint( display, pixmap, get_gc( color ), xstart, y )
					i += 1
				end if
				xstart += pcount
			end while  
		end if
		-- blit()
		redisplay = TRUE
	end if
end procedure

-- public function get_pixel(sequence s)
-- -- override Euphoria built-in 
--     sequence p
--     integer xstart, y
--     
--     if length(s)<2 or length(s)>3 then
--         crash("get_pixel must be supplied a sequence of length 2 or 3.")
--     elsif length(s) = 2 then
--         return c_func(GetPixel, {hdc, s[1], s[2]})
--     else
--         p = repeat(0, s[3])
--         y = s[2]
--         xstart = s[1]
--         for i = 1 to s[3] do
--             p[i] = c_func(GetPixel, {hdc, xstart, y}) 
--             xstart += 1
--         end for
--         return p
--     end if
-- end function

public procedure ellipse(integer color, integer fill, sequence coord1, sequence coord2)
-- atom points, npoints
-- points = 0
-- npoints = 0 integer fill, sequence coord1, sequence coord2)
	if window_exists then
		coord2 += 1
		if not color then
			color = last_bk_color
		end if
		atom gc = get_gc( color )
		coord1 = floor( coord1 )
		coord2 = floor( coord2 ) - coord1
		if fill then
			XFillArc( display, pixmap, gc, coord1[1], coord1[2], coord2[1], coord2[2], 0, 360 * 64 )
		else
			XDrawArc( display, pixmap, gc, coord1[1], coord1[2], coord2[1], coord2[2], 0, 360 * 64 )
		end if
		-- blit()
		redisplay = TRUE
	end if
end procedure

public procedure draw_line(integer c, sequence xyarray)
	atom gc
	if c = 0 then
	    c = last_bk_color
	end if
	gc = get_gc( c )
	XDrawLine( display, pixmap, gc, floor( xyarray ) )
	-- blit()
	redisplay = TRUE
end procedure

public procedure polygon(integer c, integer fill, sequence xyarray)
	if window_exists then
		atom gc
		if c = 0 then
		    c = last_bk_color
		end if
		gc = get_gc( c )
		
		if fill then
			XFillPolygon( display, pixmap, gc, xyarray )
		else
			XDrawPolygon( display, pixmap, gc, xyarray )
		end if
		-- blit()
		redisplay = TRUE
	end if
end procedure

------------------------------------------------------------------------------------------------------

public
procedure putsxy(sequence pos, sequence string, 
						integer fcolor, integer bcolor)
	XDrawImageString( display, pixmap, get_gc( fcolor, bcolor ), pos[1], pos[2]+16, string )
	-- blit()
	redisplay = TRUE
end procedure

------------------------------------------------------------------------------------------------------

atom kbc = allocate( XKeyboardControl_SIZE, 1 )
public procedure sound(integer freq)
	poke4( kbc + XKeyboardControl_bell_pitch, freq )
	poke4( kbc + XKeyboardControl_bell_duration, 500 )
	poke4( kbc + XKeyboardControl_bell_percent, 50 )
	XChangeKeyboardControl( display, KBBellPitch + KBBellDuration + KBBellPercent, kbc )
	XBell( display, 50 )
end procedure
